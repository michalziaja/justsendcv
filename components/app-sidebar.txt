"use client"

import * as React from "react"
import {
  LayoutDashboard,
  BookmarkIcon,
  FileText,
  BarChart2,
  Bot,
  UserCircle,
  Settings,
  LogOut,
  Moon,
  Sun
} from "lucide-react"
import { useTheme } from "@/contexts/theme-context"
import { NavMain } from "@/components/nav-main"
import { Button } from "@/components/ui/button"
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
} from "@/components/ui/sidebar"
import { createClient } from '@/utils/supabase/client'
import { useRouter } from 'next/navigation'

const data = {
  navMain: [
    {
      title: "Home",
      url: "/home",
      icon: LayoutDashboard,
      isActive: true,
    },
    {
      title: "Zapisane",
      url: "/saved",
      icon: BookmarkIcon,
    },
    {
      title: "Twoje CV",
      url: "/cv",
      icon: FileText,
    },
    {
      title: "Statystyki",
      url: "/statistics",
      icon: BarChart2,
    },
    {
      title: "Asystent AI",
      url: "#",
      icon: Bot,
    },
    {
      title: "Profil",
      url: "/profile",
      icon: UserCircle,
    },
    {
      title: "Ustawienia",
      url: "/settings",
      icon: Settings,
    },
  ],
}

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  const router = useRouter();
  const { theme, toggleTheme } = useTheme();

  const handleLogout = async () => {
    const supabase = createClient();
    const { error } = await supabase.auth.signOut();

    if (error) {
      console.error('Logout error:', error);
    } else {
      localStorage.removeItem('supabase_access_token');
      localStorage.removeItem('supabase_refresh_token');
      router.push('/auth');
    }
  };

  return (
    <Sidebar 
      className="w-[210px] border-r-[3px] border-gray-200 bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/95 dark:bg-gray-900 dark:border-gray-700 after:absolute after:right-0 after:top-0 after:h-full after:w-[3px] after:bg-gradient-to-b after:from-purple-500 after:via-purple-400 after:to-cyan-400 after:opacity-100 shadow-[4px_0_15px_-3px_rgba(0,0,0,0.2)]"
      {...props}
    >
      <SidebarHeader className="border-b border-gray-200/50 py-8 dark:border-gray-700/50 dark:bg-gray-900">
        <div className="px-2 flex flex-col items-center">
          <h2 className="text-5xl font-black tracking-tight bg-gradient-to-br from-purple-600 via-purple-500 to-cyan-500 bg-clip-text text-transparent hover:to-cyan-400 transition-colors leading-10">
            Just
          </h2>
          <span className="text-3xl font-extrabold tracking-tight bg-gradient-to-r from-purple-400 to-cyan-400 bg-clip-text text-transparent mt-1">
            Send.cv
          </span>
        </div>
      </SidebarHeader>
      <SidebarContent className="px-4 py-4 dark:bg-gray-900">
        <NavMain items={data.navMain} />
      </SidebarContent>
      <SidebarFooter className="border-t border-gray-200/50 bg-gray-50/50 p-4 space-y-2 dark:border-gray-700/50 dark:bg-gray-900">
        <Button 
          onClick={toggleTheme}
          variant="outline"
          size="icon"
          className="w-full flex items-center justify-center gap-2 hover:bg-gray-100 dark:hover:bg-gray-800 dark:border-gray-700"
        >
          {theme === 'light' ? (
            <>
              <Moon className="h-4 w-4" />
              <span>Tryb ciemny</span>
            </>
          ) : (
            <>
              <Sun className="h-4 w-4" />
              <span>Tryb jasny</span>
            </>
          )}
        </Button>
        <Button 
          onClick={handleLogout} 
          className="w-full bg-red-500 hover:bg-red-600 text-white flex items-center gap-2"
        >
          <LogOut className="h-4 w-4" />
          Wyloguj siÄ™
        </Button>
      </SidebarFooter>
    </Sidebar>
  )
}
